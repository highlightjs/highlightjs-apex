<span class="hljs-comment">/**
 * <span class="hljs-doctag">@author </span>John Smith
 */</span>
<span class="hljs-annotation"><span class="hljs-meta">@IsTest</span>(<span class="hljs-meta keyword">Seealldata</span><span class="hljs-operator">=</span><span class="hljs-literal">true</span></span>)
<span class="hljs-keyword">public</span> <span class="hljs-keyword">with sharing</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">L2Char</span> <span class="hljs-keyword">implements</span> <span class="hljs-built_in">Database</span>.<span class="hljs-keyword">batchable</span> {
  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> ERROR <span class="hljs-operator">=</span> <span class="hljs-number">0x0001</span>;

  <span class="hljs-annotation"><span class="hljs-meta">@InvocableMethod</span>(<span class="hljs-meta keyword">label</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;my invocable&#x27;</span></span>)
  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">moveTo</span><span class="hljs-params">(
    <span class="hljs-type">Integer</span> <span class="hljs-variable">x</span>, 
    <span class="hljs-type">Integer</span> <span class="hljs-variable">y</span>, 
    <span class="hljs-type">Integer</span> <span class="hljs-variable">z</span>
  )</span> {
    
    
    Account a <span class="hljs-operator">=</span> <span class="hljs-keyword">new </span><span class="hljs-title class_">Account</span>();
    a.Custom__c <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;stringvalue&#x27;</span>;
    <span class="hljs-type">insert</span> <span class="hljs-variable">a</span>;
    <span class="hljs-type">Boolean</span> ai <span class="hljs-operator">=</span> (<span class="hljs-type">Boolean</span>) <span class="hljs-literal">false</span>;
    <span class="hljs-built_in">System</span>.<span class="hljs-title function_ invoke__">debug</span><span class="hljs-params">(<span class="hljs-string">&#x27;Should not be called&#x27;</span>)</span>;
    <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span><span class="hljs-operator"> &gt; </span><span class="hljs-number">5</span> <span class="hljs-operator">&amp;&amp;</span> <span class="hljs-operator">!</span><span class="hljs-built_in">Test</span>.<span class="hljs-title function_ invoke__">isRunningTest</span><span class="hljs-params">()</span>) { <span class="hljs-comment">// wtf!?
</span>      <span class="hljs-built_in">Database</span>.<span class="hljs-title function_ invoke__">insert</span><span class="hljs-params">(<span class="hljs-variable">myAccounts</span>, <span class="hljs-literal">false</span>)</span>;
    }
  }
}

<span class="hljs-meta">@TestSetup</span>
<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">makeData</span><span class="hljs-params">(<span class="hljs-type">Boolean</span> <span class="hljs-variable">a</span>)</span>{
  Custom__c c <span class="hljs-operator">=</span> <span class="hljs-keyword">new </span><span class="hljs-title class_">Custom__c</span>();
  
  <span class="hljs-keyword">for</span>(<span class="hljs-type">Account</span> <span class="hljs-variable">a</span> <span class="hljs-operator">:</span> <span class="hljs-variable">acctLis</span> ){
    <span class="hljs-built_in">ConnectApi</span>.<span class="hljs-built_in">insert </span><span class="hljs-variable">a</span>;
  }
}

<span class="hljs-meta">@isTest</span>
<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">testme</span><span class="hljs-params">()</span>{
  <span class="hljs-built_in">System</span>.<span class="hljs-title function_ invoke__">assert</span><span class="hljs-params">(<span class="hljs-literal">true</span>)</span>;
}

<span class="hljs-meta">@testVisible</span>
<span class="hljs-keyword">private</span> <span class="hljs-collection"><span class="hljs-type">List</span>&lt;<span class="hljs-type">SelectOption</span>&gt;</span> recordTypes { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">private</span> <span class="hljs-keyword">set</span>; }

<span class="hljs-keyword">for</span>(<span class="hljs-type">Account</span> <span class="hljs-variable">a</span> <span class="hljs-operator">:</span> [<span class="hljs-keyword">SELECT</span> Id <span class="hljs-keyword">FROM</span> <span class="hljs-type">Account</span> <span class="hljs-keyword">WHERE</span> LastModifiedDate <span class="hljs-operator">=</span> <span class="hljs-variable language_">LAST_N_DAYS</span><span class="hljs-operator">:</span><span class="hljs-number">3</span>]){
  <span class="hljs-built_in">Assert</span>.<span class="hljs-title function_ invoke__">fail</span><span class="hljs-params">()</span>;
}

<span class="hljs-keyword">trigger</span> <span class="hljs-title class_">CTrig</span> <span class="hljs-operator">on</span> <span class="hljs-title class_">Custom__c</span> (<span class="hljs-built_in">before insert</span>){
  <span class="hljs-built_in">System</span>.<span class="hljs-title function_ invoke__">debug</span><span class="hljs-params">(<span class="hljs-string">&#x27;inserting a record&#x27;</span>)</span>;
  <span class="hljs-type">upsert</span> <span class="hljs-variable">myRecord__c</span>;
}