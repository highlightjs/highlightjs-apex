# [PackageDev] target_format: plist, ext: tmLanguage




repository:
  comment:
    patterns:
    - name: comment.block.apex
      begin: /\*(\*)?
      beginCaptures:
        '0': {name: punctuation.definition.comment.apex}
      end: \*/
      endCaptures:
        '0': {name: punctuation.definition.comment.apex}
    - begin: (^\s+)?(?=//)
      beginCaptures:
        '1': {name: punctuation.whitespace.comment.leading.apex}
      end: (?=$)
      patterns:
      - name: comment.block.documentation.apex
        begin: (?<!/)///(?!/)
        beginCaptures:
          '0': {name: punctuation.definition.comment.apex}
        end: (?=$)
        patterns:
        - include: '#xml-doc-comment'
      - name: comment.line.double-slash.apex
        begin: (?<!/)//(?:(?!/)|(?=//))
        beginCaptures:
          '0': {name: punctuation.definition.comment.apex}
        end: (?=$)
  support-arguments:
    begin: <
    beginCaptures:
      '0': {name: punctuation.definition.typeparameters.begin.apex}
    end: '>'
    endCaptures:
      '0': {name: punctuation.definition.typeparameters.end.apex}
    patterns:
    - include: '#comment'
    - include: '#support-type'
    - include: '#punctuation-comma'
  storage-modifier:
    name: storage.modifier.apex
    match: (?<!\.)\b(new|public|protected|private|abstract|virtual|override|global|static|final|transient)\b
  operator-assignment:
    name: keyword.operator.assignment.apex
    match: (?<!=|!)(=)(?!=)
  operator-safe-navigation:
    name: keyword.operator.safe-navigation.apex
    match: \?\.
  support-functions:
    match: \b(delete|execute|finish|insert|start|undelete|update|upsert)\b
    captures:
      '1': {name: support.function.apex}

  support-expression:
    begin: |-
      (?x)
      (ApexPages|Database|DMLException|Exception|PageReference|Savepoint|SchedulableContext|Schema|SObject|System|Test)(?=\.|\s) # supported apex namespaces
    beginCaptures:
      '1': {name: support.class.apex}
    end: (?<=\)|$)|(?=\})|(?=;)|(?=\)|(?=\]))|(?=\,)
    patterns:
    - include: '#support-type'
    - match: (?:(\.))([[:alpha:]]*)(?=\()
      captures:
        '1': {name: punctuation.accessor.apex}
        '2': {name: support.function.apex}
    - match: (?:(\.))([[:alpha:]]+)
      captures:
        '1': {name: punctuation.accessor.apex}
        '2': {name: support.type.apex}
    - begin: \(
      beginCaptures:
        '0': {name: punctuation.parenthesis.open.apex}
      end: \)
      endCaptures:
        '0': {name: punctuation.parenthesis.close.apex}
      patterns:
      - include: '#expression'
      - include: '#punctuation-comma'
    - include: '#comment'
    - include: '#statement'
  support-name:
    patterns:
    - match: (\.)\s*([[:alpha:]]*)(?=\()
      captures:
        '1': {name: punctuation.accessor.apex}
        '2': {name: support.function.apex}
    - begin: \(
      beginCaptures:
        '0': {name: punctuation.parenthesis.open.apex}
      end: \)
      endCaptures:
        '0': {name: punctuation.parenthesis.close.apex}
      patterns:
      - include: '#expression'
      - include: '#punctuation-comma'
    - match: (\.)\s*([_[:alpha:]]*)
      captures:
        '1': {name: punctuation.accessor.apex}
        '2': {name: support.type.apex}  
  support-type:
    name: support.apex
    patterns:
    - include: '#comment'
    - include: '#support-class'
    - include: '#support-functions'
    - include: '#support-name'
  support-class:
    match: \b(ApexPages|Database|DMLException|Exception|PageReference|Savepoint|SchedulableContext|Schema|SObject|System|Test)\b
    captures:
      '1': {name: support.class.apex}
  script-top-level:
    patterns:
    - include: '#method-declaration'
    - include: '#statement'
    - include: '#punctuation-semicolon'
  merge-expression:
    begin: (merge)\b\s+
    beginCaptures:
      '1': {name: support.function.apex}
    end: (?<=\;)
    patterns:
    - include: '#object-creation-expression'
    - include: '#merge-type-statement'
    - include: '#expression'
    - include: '#punctuation-semicolon'
  merge-type-statement:
    match: ([_[:alpha:]]*)\b\s+([_[:alpha:]]*)\b\s*(\;)
    captures:
      '1': {name: variable.other.readwrite.apex}
      '2': {name: variable.other.readwrite.apex}
      '3': {name: punctuation.terminator.statement.apex}
  constructor-declaration:
    begin: (?=@?[_[:alpha:]][_[:alnum:]]*\s*\()
    end: (?<=\})|(?=;)
    patterns:
    - match: (@?[_[:alpha:]][_[:alnum:]]*)\b
      captures:
        '1': {name: entity.name.function.apex}
    - begin: (:)
      beginCaptures:
        '1': {name: punctuation.separator.colon.apex}
      end: (?=\{|=>)
      patterns:
      - include: '#constructor-initializer'
    - include: '#parenthesized-parameter-list'
    - include: '#comment'
    - include: '#expression-body'
    - include: '#block'

  constructor-initializer:
    begin: \b(?:(this))\b\s*(?=\()
    beginCaptures:
      '1': {name: keyword.other.this.apex}
    end: (?<=\))
    patterns:
    - include: '#argument-list'

  expression-body:
    begin: =>
    beginCaptures:
      '0': {name: keyword.operator.arrow.apex}
    end: (?=[,\);}])
    patterns:
    - include: '#expression'
  method-name-custom:
    name: entity.name.function.apex
    match: '@?[_[:alpha:]][_[:alnum:]]*'
  named-argument:
    begin: (@?[_[:alpha:]][_[:alnum:]]*)\s*(:)
    beginCaptures:
      '1': {name: entity.name.variable.parameter.apex}
      '2': {name: punctuation.separator.colon.apex}
    end: (?=(,|\)|\]))
    patterns:
    - include: '#expression'
  argument-list:
    begin: \(
    beginCaptures:
      '0': {name: punctuation.parenthesis.open.apex}
    end: \)
    endCaptures:
      '0': {name: punctuation.parenthesis.close.apex}
    patterns:
    - include: '#named-argument'
    - include: '#expression'
    - include: '#punctuation-comma'
  javadoc-comment:
    patterns:
    - name: comment.block.javadoc.apex
      begin: ^\s*(/\*\*)(?!/)
      beginCaptures:
        '1': {name: punctuation.definition.comment.apex}
      end: \*/
      endCaptures:
        '0': {name: punctuation.definition.comment.apex}
      patterns:
      - name: keyword.other.documentation.javadoc.apex
        match: '@(deprecated|author|return|see|serial|since|version|usage|name|link)\b'
      - match: (@param)\s+(\S+)
        captures:
          '1': {name: keyword.other.documentation.javadoc.apex}
          '2': {name: entity.name.variable.parameter.apex}
      - match: (@(?:exception|throws))\s+(\S+)
        captures:
          '1': {name: keyword.other.documentation.javadoc.apex}
          '2': {name: entity.name.type.class.apex}
      - match: (`([^`]+?)`)
        captures:
          '1': {name: string.quoted.single.apex}
  null-literal:
    name: constant.language.null.apex
    match: (?<!\.)\bnull\b
  boolean-literal:
    patterns:
    - name: constant.language.boolean.true.apex
      match: (?<!\.)\btrue\b
    - name: constant.language.boolean.false.apex
      match: (?<!\.)\bfalse\

  type-name:
    patterns:
    - match: (@?[_[:alpha:]][_[:alnum:]]*)\s*(\.)
      captures:
        '1': {name: storage.type.apex}
        '2': {name: punctuation.accessor.apex}
    - match: (\.)\s*(@?[_[:alpha:]][_[:alnum:]]*)
      captures:
        '1': {name: punctuation.accessor.apex}
        '2': {name: storage.type.apex}
    - name: storage.type.apex
      match: '@?[_[:alpha:]][_[:alnum:]]*' 
  type-builtin:
    match: \b(Blob|Boolean|byte|Date|Datetime|Decimal|Double|ID|Integer|Long|Object|String|Time|void)\b
    captures:
      '1': {name: keyword.type.apex}
  type-arguments:
    begin: <
    beginCaptures:
      '0': {name: punctuation.definition.typeparameters.begin.apex}
    end: '>'
    endCaptures:
      '0': {name: punctuation.definition.typeparameters.end.apex}
    patterns:
    - include: '#comment'
    - include: '#support-type'
    - include: '#type'
    - include: '#punctuation-comma'

  type-array-suffix:
    begin: \[
    beginCaptures:
      '0': {name: punctuation.squarebracket.open.apex}
    end: \]
    endCaptures:
      '0': {name: punctuation.squarebracket.close.apex}
    patterns:
    - include: '#punctuation-comma'
  identifier:
    name: variable.other.readwrite.apex
    match: '@?[_[:alpha:]][_[:alnum:]]*'    
  declarations:
    patterns:
    - include: '#type-declarations'
    - include: '#punctuation-semicolon'    
  expression:
    patterns:
    - include: '#comment'
    - include: '#merge-expression'
    - include: '#support-expression'
    - include: '#throw-expression'
    - include: '#this-expression'
    - include: '#trigger-context-declaration'
    - include: '#conditional-operator'
    - include: '#expression-operators'
    - include: '#soql-query-expression'
    - include: '#object-creation-expression'
    - include: '#array-creation-expression'
    - include: '#invocation-expression'
    - include: '#member-access-expression'
    - include: '#element-access-expression'
    - include: '#cast-expression'
    - include: '#literal'
    - include: '#parenthesized-expression'
    - include: '#initializer-expression'
    - include: '#identifier'
  expression-operators:
    patterns:
    - name: keyword.operator.assignment.compound.apex
      match: \*=|/=|%=|\+=|-=
    - name: keyword.operator.assignment.compound.bitwise.apex
      match: \&=|\^=|<<=|>>=|\|=
    - name: keyword.operator.bitwise.shift.apex
      match: <<|>>
    - name: keyword.operator.comparison.apex
      match: ==|!=
    - name: keyword.operator.relational.apex
      match: <=|>=|<|>
    - name: keyword.operator.logical.apex
      match: \!|&&|\|\|
    - name: keyword.operator.bitwise.apex
      match: \&|~|\^|\|
    - name: keyword.operator.assignment.apex
      match: \=
    - name: keyword.operator.decrement.apex
      match: --
    - name: keyword.operator.increment.apex
      match: \+\+
    - name: keyword.operator.arithmetic.apex
      match: '%|\*|/|-|\+'
  type:
    name: meta.type.apex
    patterns:
    - include: '#comment'
    - include: '#type-builtin'
    - include: '#type-name'
    - include: '#type-arguments'
    - include: '#type-array-suffix'
    - include: '#type-nullable-suffix'
  statement:
    patterns:
    - include: '#comment'
    - include: '#while-statement'
    - include: '#do-statement'
    - include: '#for-statement'
    - include: '#switch-statement'
    - include: '#when-else-statement'
    - include: '#when-sobject-statement'
    - include: '#when-statement'
    - include: '#when-multiple-statement'
    - include: '#if-statement'
    - include: '#else-part'
    - include: '#goto-statement'
    - include: '#return-statement'
    - include: '#break-or-continue-statement'
    - include: '#throw-statement'
    - include: '#try-statement'
    - include: '#soql-query-expression'
    - include: '#local-declaration'
    - include: '#block'
    - include: '#expression'
    - include: '#punctuation-semicolon'
  sharing-modifier:
    name: sharing.modifier.apex
    match: (?<!\.)\b(with sharing|without sharing|inherited sharing)\b
  return-statement:
    begin: (?<!\.)\b(return)\b
    beginCaptures:
      '1': {name: keyword.control.flow.return.apex}
    end: (?=;)
    patterns:
    - include: '#expression'
  enum-declaration:
    begin: (?=\benum\b)
    end: (?<=\})
    patterns:
    - begin: (?=enum)
      end: (?=\{)
      patterns:
      - include: '#javadoc-comment'
      - include: '#comment'
      - match: (enum)\s+(@?[_[:alpha:]][_[:alnum:]]*)
        captures:
          '1': {name: keyword.other.enum.apex}
          '2': {name: entity.name.type.enum.apex}
    - begin: \{
      beginCaptures:
        '0': {name: punctuation.curlybrace.open.apex}
      end: \}
      endCaptures:
        '0': {name: punctuation.curlybrace.close.apex}
      patterns:
      - include: '#javadoc-comment'
      - include: '#comment'
      - include: '#punctuation-comma'
      - begin: '@?[_[:alpha:]][_[:alnum:]]*'
        beginCaptures:
          '0': {name: entity.name.variable.enum-member.apex}
        end: (?=(,|\}))
        patterns:
        - include: '#javadoc-comment'
        - include: '#comment'
        - include: '#variable-initializer'
    - include: '#javadoc-comment'
    - include: '#comment'

  conditional-operator:
    begin: (?<!\?)\?(?!\?|\.|\[)
    beginCaptures:
      '0': {name: keyword.operator.conditional.question-mark.apex}
    end: ':'
    endCaptures:
      '0': {name: keyword.operator.conditional.colon.apex}
    patterns:
    - include: '#expression'
  block:
    begin: \{
    beginCaptures:
      '0': {name: punctuation.curlybrace.open.apex}
    end: \}
    endCaptures:
      '0': {name: punctuation.curlybrace.close.apex}
    patterns:
    - include: '#statement'
  literal:
    patterns:
    - include: '#boolean-literal'
    - include: '#null-literal'
    - include: '#numeric-literal'
    - include: '#string-literal'
  colon-expression:
    name: keyword.operator.conditional.colon.apex
    match: ':'
  annotation-declaration:
    begin: ([@][_[:alpha:]]+)\b
    beginCaptures:
      '1': {name: storage.type.annotation.apex}
    end: (?<=\)|$)
    patterns:
    - begin: \(
      beginCaptures:
        '0': {name: punctuation.parenthesis.open.apex}
      end: \)
      endCaptures:
        '0': {name: punctuation.parenthesis.close.apex}
      patterns:
      - include: '#expression'
    - include: '#statement'
  type-nullable-suffix:
    match: \?
    captures:
      '0': {name: punctuation.separator.question-mark.apex}
  type-declarations:
    patterns:
    - include: '#javadoc-comment'
    - include: '#comment'
    - include: '#annotation-declaration'
    - include: '#storage-modifier'
    - include: '#sharing-modifier'
    - include: '#class-declaration'
    - include: '#enum-declaration'
    - include: '#interface-declaration'
    - include: '#trigger-declaration'
    - include: '#punctuation-semicolon'
  directives:
    patterns:
    - include: '#punctuation-semicolon'
  numeric-literal:
    patterns:
    - name: constant.numeric.datetime.apex
      match: \b(\d{4}\-\d{2}\-\d{2}T\d{2}\:\d{2}\:\d{2}(\.\d{1,3})?(\-|\+)\d{2}\:\d{2})\b
    - name: constant.numeric.datetime.apex
      match: \b(\d{4}\-\d{2}\-\d{2}T\d{2}\:\d{2}\:\d{2}(\.\d{1,3})?(Z)?)\b
    - name: constant.numeric.date.apex
      match: \b(\d{4}\-\d{2}\-\d{2})\b
    - name: constant.numeric.hex.apex
      match: \b0(x|X)[0-9a-fA-F_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b
    - name: constant.numeric.binary.apex
      match: \b0(b|B)[01_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b
    - name: constant.numeric.decimal.apex
      match: \b([0-9_]+)?\.[0-9_]+((e|E)[0-9]+)?(F|f|D|d|M|m)?\b
    - name: constant.numeric.decimal.apex
      match: \b[0-9_]+(e|E)[0-9_]+(F|f|D|d|M|m)?\b
    - name: constant.numeric.decimal.apex
      match: \b[0-9_]+(F|f|D|d|M|m)\b
    - name: constant.numeric.decimal.apex
      match: \b[0-9_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b

  punctuation-accessor:
    name: punctuation.accessor.apex
    match: \.

  punctuation-comma:
    name: punctuation.separator.comma.apex
    match: ','

  punctuation-semicolon:
    name: punctuation.terminator.statement.apex
    match: ;

  string-character-escape:
    name: constant.character.escape.apex
    match: \\.

  string-literal:
    name: string.quoted.single.apex
    begin: ''''
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.apex}
    end: (\')|((?:[^\\\n])$)
    endCaptures:
      '1': {name: punctuation.definition.string.end.apex}
      '2': {name: invalid.illegal.newline.apex}
    patterns:
    - include: '#string-character-escape'
  trigger-operator-statement:
    name: keyword.operator.trigger.apex
    match: \b(insert|update|delete|merge|upsert|undelete)\b

  trigger-type-statement:
    match: \b(?:(before)|(after))\b
    captures:
      '1': {name: keyword.control.trigger.before.apex}
      '2': {name: keyword.control.trigger.after.apex}
  trigger-declaration:
    begin: (?=\btrigger\b)
    end: (?<=\})
    patterns:
    - begin: |-
        (?x)
        \b(trigger)\b\s+
        (@?[_[:alpha:]][_[:alnum:]]*)\s*
        \b(on)\b\s+
        ([_[:alpha:]][_[:alnum:]]*)\s*
      beginCaptures:
        '1': {name: keyword.other.trigger.apex}
        '2': {name: entity.name.type.trigger.apex}
        '3': {name: keyword.operator.trigger.on.apex}
        '4': {name: storage.type.apex}
      end: (?=\{)
      patterns:
      - begin: \(
        beginCaptures:
          '0': {name: punctuation.parenthesis.open.apex}
        end: \)
        endCaptures:
          '0': {name: punctuation.parenthesis.close.apex}
        patterns:
        - include: '#trigger-type-statement'
        - include: '#trigger-operator-statement'
        - include: '#punctuation-comma'
        - include: '#expression'
      - include: '#javadoc-comment'
      - include: '#comment'
      - include: '#type-parameter-list'
    - begin: \{
      beginCaptures:
        '0': {name: punctuation.curlybrace.open.apex}
      end: \}
      endCaptures:
        '0': {name: punctuation.curlybrace.close.apex}
      patterns:
      - include: '#statement'
      - include: '#class-or-trigger-members'
    - include: '#javadoc-comment'
    - include: '#comment'
  trigger-context-declaration:
    begin: \b(?:(Trigger))\b(\.)\b
    beginCaptures:
      '1': {name: support.class.trigger.apex}
      '2': {name: punctuation.accessor.apex}
    end: (?=\})|(?=;)|(?=\)|(?=\]))
    patterns:
    - name: support.type.trigger.apex
      match: \b(isExecuting|isInsert|isUpdate|isDelete|isBefore|isAfter|isUndelete|new|newMap|old|oldMap|size)\b
    - match: (?:(\??\.))([[:alpha:]]+)(?=\()
      captures:
        '1':
          patterns:
          - include: '#punctuation-accessor'
          - include: '#operator-safe-navigation'
        '2': {name: support.function.trigger.apex}
    - begin: \(
      beginCaptures:
        '0': {name: punctuation.parenthesis.open.apex}
      end: \)
      endCaptures:
        '0': {name: punctuation.parenthesis.close.apex}
      patterns:
      - include: '#trigger-type-statement'
      - include: '#javadoc-comment'
      - include: '#comment'
      - include: '#expression'
    - include: '#expression'

