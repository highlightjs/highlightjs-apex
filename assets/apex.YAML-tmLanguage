# [PackageDev] target_format: plist, ext: tmLanguage
name: Apex
scopeName: source.apex
fileTypes:
- apex
- cls
- trigger
uuid: F5FC6824-F257-43B1-B53A-14E1CCD18631

patterns:
- include: '#javadoc-comment' //done

- include: '#comment' //done

- include: '#directives' //done

- include: '#declarations'

- include: '#script-top-level'







  array-creation-expression:
    begin: |-
      (?x)
      \b(new)\b\s*
      (?<type-name>
        (?:
          (?:
            (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
            (?<name-and-type-args> # identifier + type arguments (if any)
              \g<identifier>\s*
              (?<type-args>\s*<(?:[^<>]|\g<type-args>)+>\s*)?
            )
            (?:\s*\.\s*\g<name-and-type-args>)*
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s*\[(?:\s*,\s*)*\]\s*)* # array suffix?
        )
      )?\s*
      (?=\[)
    beginCaptures:
      '1': {name: keyword.control.new.apex}
      '2':
        patterns:
        - include: '#support-type'
        - include: '#type'
    end: (?<=\])
    patterns:
    - include: '#bracketed-argument-list'



  bracketed-argument-list:
    begin: \[
    beginCaptures:
      '0': {name: punctuation.squarebracket.open.apex}
    end: \]
    endCaptures:
      '0': {name: punctuation.squarebracket.close.apex}
    patterns:
    - include: '#soql-query-expression'
    - include: '#named-argument'
    - include: '#expression'
    - include: '#punctuation-comma'



  cast-expression:
    match: |-
      (?x)
      (\()\s*
      (?<type-name>
        (?:
          (?:
            (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
            (?<name-and-type-args> # identifier + type arguments (if any)
              \g<identifier>\s*
              (?<type-args>\s*<(?:[^<>]|\g<type-args>)+>\s*)?
            )
            (?:\s*\.\s*\g<name-and-type-args>)*
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s*\[(?:\s*,\s*)*\]\s*)* # array suffix?
        )
      )\s*
      (\))(?=\s*@?[_[:alnum:]\(])
    captures:
      '1': {name: punctuation.parenthesis.open.apex}
      '2':
        patterns:
        - include: '#support-type'
        - include: '#type'
      '6': {name: punctuation.parenthesis.close.apex}

  catch-clause:
    begin: (?<!\.)\b(catch)\b
    beginCaptures:
      '1': {name: keyword.control.try.catch.apex}
    end: (?<=\})
    patterns:
    - begin: \(
      beginCaptures:
        '0': {name: punctuation.parenthesis.open.apex}
      end: \)
      endCaptures:
        '0': {name: punctuation.parenthesis.close.apex}
      patterns:
      - match: |-
          (?x)
          (?<type-name>
            (?:
              (?:
                (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
                (?<name-and-type-args> # identifier + type arguments (if any)
                  \g<identifier>\s*
                  (?<type-args>\s*<(?:[^<>]|\g<type-args>)+>\s*)?
                )
                (?:\s*\.\s*\g<name-and-type-args>)*
              )
              (?:\s*\?\s*)? # nullable suffix?
              (?:\s*\[(?:\s*,\s*)*\]\s*)* # array suffix?
            )
          )\s*
          (?:(\g<identifier>)\b)?
        captures:
          '1':
            patterns:
            - include: '#support-type'
            - include: '#type'
          '5': {name: entity.name.variable.local.apex}
    - include: '#comment'
    - include: '#block'



  
  field-declaration:
    begin: |-
      (?x)
      (?<type-name>
        (?:
          (?:
            (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
            (?<name-and-type-args> # identifier + type arguments (if any)
              \g<identifier>\s*
              (?<type-args>\s*<(?:[^<>]|\g<type-args>)+>\s*)?
            )
            (?:\s*\.\s*\g<name-and-type-args>)*
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s*\[(?:\s*,\s*)*\]\s*)* # array suffix?
        )
      )\s+
      (\g<identifier>)\s* # first field name
      (?!=>|==)(?=,|;|=|$)
    beginCaptures:
      '1':
        patterns:
        - include: '#support-type'
        - include: '#type'
      '5': {name: entity.name.variable.field.apex}
    end: (?=;)
    patterns:
    - name: entity.name.variable.field.apex
      match: '@?[_[:alpha:]][_[:alnum:]]*'
    - include: '#punctuation-comma'
    - include: '#comment'
    - include: '#variable-initializer'
    - include: '#class-or-trigger-members'

  indexer-declaration:
    begin: |-
      (?x)
      (?<return-type>
        (?<type-name>
          (?:
            (?:ref\s+)?   # ref return
            (?:
              (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
              (?<name-and-type-args> # identifier + type arguments (if any)
                \g<identifier>\s*
                (?<type-args>\s*<(?:[^<>]|\g<type-args>)+>\s*)?
              )
              (?:\s*\.\s*\g<name-and-type-args>)*
            )
            (?:\s*\?\s*)? # nullable suffix?
            (?:\s*\[(?:\s*,\s*)*\]\s*)* # array suffix?
          )
        )\s+
      )
      (?<interface-name>\g<type-name>\s*\.\s*)?
      (?<indexer-name>this)\s*
      (?=\[)
    beginCaptures:
      '1':
        patterns:
        - include: '#type'
      '6':
        patterns:
        - include: '#type'
        - include: '#punctuation-accessor'
      '7': {name: keyword.other.this.apex}
    end: (?<=\})|(?=;)
    patterns:
    - include: '#comment'
    - include: '#property-accessors'
    - include: '#expression-body'
    - include: '#variable-initializer'


  









  local-constant-declaration:
    begin: |-
      (?x)
      (?<const-keyword>\b(?:const)\b)\s*
      (?<type-name>
        (?:
          (?:
            (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
            (?<name-and-type-args> # identifier + type arguments (if any)
              \g<identifier>\s*
              (?<type-args>\s*<(?:[^<>]|\g<type-args>)+>\s*)?
            )
            (?:\s*\.\s*\g<name-and-type-args>)*
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s*\[(?:\s*,\s*)*\]\s*)* # array suffix?
        )
      )\s+
      (\g<identifier>)\s*
      (?=,|;|=)
    beginCaptures:
      '1': {name: storage.modifier.apex}
      '2':
        patterns:
        - include: '#type'
      '6': {name: entity.name.variable.local.apex}
    end: (?=;)
    patterns:
    - name: entity.name.variable.local.apex
      match: '@?[_[:alpha:]][_[:alnum:]]*'
    - include: '#punctuation-comma'
    - include: '#comment'
    - include: '#variable-initializer'



  local-variable-declaration:
    begin: |-
      (?x)
      (?:
        (?:(\bref)\s+)?(\bvar\b)| # ref local
        (?<type-name>
          (?:
            (?:ref\s+)?   # ref local
            (?:
              (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
              (?<name-and-type-args> # identifier + type arguments (if any)
                \g<identifier>\s*
                (?<type-args>\s*<(?:[^<>]|\g<type-args>)+>\s*)?
              )
              (?:\s*\.\s*\g<name-and-type-args>)*
            )
            (?:\s*\?\s*)? # nullable suffix?
            (?:\s*\[(?:\s*,\s*)*\]\s*)* # array suffix?
          )
        )
      )\s+
      (\g<identifier>)\s*
      (?=,|;|=|\))
    beginCaptures:
      '1': {name: storage.modifier.apex}
      '2': {name: keyword.other.var.apex}
      '3':
        patterns:
        - include: '#support-type'
        - include: '#type'
      '7': {name: entity.name.variable.local.apex}
    end: (?=;|\))
    patterns:
    - match: '@?[_[:alpha:]][_[:alnum:]]*'
      name: entity.name.variable.local.apex
    - include: '#punctuation-comma'
    - include: '#comment'
    - include: '#variable-initializer'

    local-declaration:
    patterns:
    - include: '#local-constant-declaration'
    - include: '#local-variable-declaration'

  member-access-expression:
    patterns:
    - match: |-
        (?x)
        (\??\.)\s*                       # safe navigator or accessor
        (@?[_[:alpha:]][_[:alnum:]]*)\s* # property name
        (?![_[:alnum:]]|\(|(\?)?\[|<)    # next character is not alpha-numeric, nor a (, [, or <. Also, test for ?[
      captures:
        '1':
          patterns:
          - include: '#punctuation-accessor'
          - include: '#operator-safe-navigation'
        '2': {name: variable.other.object.property.apex}
    - match: |-
        (?x)
        (\??\.)?\s*
        (@?[_[:alpha:]][_[:alnum:]]*)
        (?<type-params>\s*<([^<>]|\g<type-params>)+>\s*)
        (?=
          (\s*\?)?
          \s*\.\s*@?[_[:alpha:]][_[:alnum:]]*
        )
      captures:
        '1':
          patterns:
          - include: '#punctuation-accessor'
          - include: '#operator-safe-navigation'
        '2': {name: variable.other.object.apex}
        '3':
          patterns:
          - include: '#type-arguments'
    - match: |-
        (?x)
        (@?[_[:alpha:]][_[:alnum:]]*)
        (?=
          (\s*\?)?
          \s*\.\s*@?[_[:alpha:]][_[:alnum:]]*
        )
      captures:
        '1': {name: variable.other.object.apex}




  method-declaration:
    begin: |-
      (?x)
      (?<return-type>
        (?<type-name>
          (?:
            (?:ref\s+)?   # ref return
            (?:
              (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
              (?<name-and-type-args> # identifier + type arguments (if any)
                \g<identifier>\s*
                (?<type-args>\s*<(?:[^<>]|\g<type-args>)+>\s*)?
              )
              (?:\s*\.\s*\g<name-and-type-args>)*
            )
            (?:\s*\?\s*)? # nullable suffix?
            (?:\s*\[(?:\s*,\s*)*\]\s*)* # array suffix?
          )
        )\s+
      )
      (?<interface-name>\g<type-name>\s*\.\s*)?
      (\g<identifier>)\s*
      (<([^<>]+)>)?\s*
      (?=\()
    beginCaptures:
      '1':
        patterns:
        - include: '#support-type'
        - include: '#type'
      '6':
        patterns:
        - include: '#type'
        - include: '#punctuation-accessor'
      '7':
        patterns:
        - include: '#support-type'
        - include: '#method-name-custom'
      '8':
        patterns:
        - include: '#type-parameter-list'
    end: (?<=\})|(?=;)
    patterns:
    - include: '#comment'
    - include: '#parenthesized-parameter-list'
    - include: '#expression-body'
    - include: '#block'








  object-creation-expression:
    patterns:
    - include: '#object-creation-expression-with-parameters'
    - include: '#object-creation-expression-with-no-parameters'
    - include: '#punctuation-comma'

  object-creation-expression-with-no-parameters:
    match: |-
      (?x)
      (delete|insert|undelete|update|upsert)?
      \s*(new)\s+
      (?<type-name>
        (?:
          (?:
            (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
            (?<name-and-type-args> # identifier + type arguments (if any)
              \g<identifier>\s*
              (?<type-args>\s*<(?:[^<>]|\g<type-args>)+>\s*)?
            )
            (?:\s*\.\s*\g<name-and-type-args>)*
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s*\[(?:\s*,\s*)*\]\s*)* # array suffix?
        )
      )\s*
      (?=\{|$)
    captures:
      '1': {name: support.function.apex}
      '2': {name: keyword.control.new.apex}
      '3':
        patterns:
        - include: '#support-type'
        - include: '#type'

  object-creation-expression-with-parameters:
    begin: |-
      (?x)
      (delete|insert|undelete|update|upsert)?
      \s*(new)\s+
      (?<type-name>
        (?:
          (?:
            (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
            (?<name-and-type-args> # identifier + type arguments (if any)
              \g<identifier>\s*
              (?<type-args>\s*<(?:[^<>]|\g<type-args>)+>\s*)?
            )
            (?:\s*\.\s*\g<name-and-type-args>)*
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s*\[(?:\s*,\s*)*\]\s*)* # array suffix?
        )
      )\s*
      (?=\()
    beginCaptures:
      '1': {name: support.function.apex}
      '2': {name: keyword.control.new.apex}
      '3':
        patterns:
        - include: '#support-type'
        - include: '#type'
    end: (?<=\))
    patterns:
    - include: '#argument-list'

  parameter:
    match: |-
      (?x)
      (?:(?:\b(this)\b)\s+)?
      (?<type-name>
        (?:
          (?:ref\s+)?   # ref return
          (?:
            (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
            (?<name-and-type-args> # identifier + type arguments (if any)
              \g<identifier>\s*
              (?<type-args>\s*<(?:[^<>]|\g<type-args>)+>\s*)?
            )
            (?:\s*\.\s*\g<name-and-type-args>)*
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s*\[(?:\s*,\s*)*\]\s*)* # array suffix?
        )
      )\s+
      (\g<identifier>)
    captures:
      '1': {name: storage.modifier.apex}
      '2':
        patterns:
        - include: '#support-type'
        - include: '#type'
      '6': {name: entity.name.variable.parameter.apex}

  parenthesized-expression:
    begin: \(
    beginCaptures:
      '0': {name: punctuation.parenthesis.open.apex}
    end: \)
    endCaptures:
      '0': {name: punctuation.parenthesis.close.apex}
    patterns:
    - include: '#expression'

  parenthesized-parameter-list:
    begin: (\()
    beginCaptures:
      '0': {name: punctuation.parenthesis.open.apex}
    end: (\))
    endCaptures:
      '0': {name: punctuation.parenthesis.close.apex}
    patterns:
    - include: '#comment'
    - include: '#parameter'
    - include: '#punctuation-comma'
    - include: '#variable-initializer'

  property-accessors:
    begin: \{
    beginCaptures:
      '0': {name: punctuation.curlybrace.open.apex}
    end: \}
    endCaptures:
      '0': {name: punctuation.curlybrace.close.apex}
    patterns:
    - name: storage.modifier.apex
      match: \b(private|protected)\b
    - name: keyword.other.get.apex
      match: \b(get)\b
    - name: keyword.other.set.apex
      match: \b(set)\b
    - include: '#comment'
    - include: '#expression-body'
    - include: '#block'
    - include: '#punctuation-semicolon'

  property-declaration:
    begin: |-
      (?x)
      (?!.*\b(?:class|interface|enum)\b)\s*
      (?<return-type>
        (?<type-name>
          (?:
            (?:ref\s+)?   # ref return
            (?:
              (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
              (?<name-and-type-args> # identifier + type arguments (if any)
                \g<identifier>\s*
                (?<type-args>\s*<(?:[^<>]|\g<type-args>)+>\s*)?
              )
              (?:\s*\.\s*\g<name-and-type-args>)*
            )
            (?:\s*\?\s*)? # nullable suffix?
            (?:\s*\[(?:\s*,\s*)*\]\s*)* # array suffix?
          )
        )\s+
      )
      (?<interface-name>\g<type-name>\s*\.\s*)?
      (?<property-name>\g<identifier>)\s*
      (?=\{|=>|$)
    beginCaptures:
      '1':
        patterns:
        - include: '#type'
      '6':
        patterns:
        - include: '#type'
        - include: '#punctuation-accessor'
      '7': {name: entity.name.variable.property.apex}
    end: (?<=\})|(?=;)
    patterns:
    - include: '#comment'
    - include: '#property-accessors'
    - include: '#expression-body'
    - include: '#variable-initializer'
    - include: '#class-or-trigger-members'







  type-parameter-list:
    begin: \<
    beginCaptures:
      '0': {name: punctuation.definition.typeparameters.begin.apex}
    end: \>
    endCaptures:
      '0': {name: punctuation.definition.typeparameters.end.apex}
    patterns:
    - match: (@?[_[:alpha:]][_[:alnum:]]*)\b
      captures:
        '1': {name: entity.name.type.type-parameter.apex}
    - include: '#comment'
    - include: '#punctuation-comma'



  when-else-statement:
    begin: (when)\b\s+(else)\b\s*
    beginCaptures:
      '1': {name: keyword.control.switch.when.apex}
      '2': {name: keyword.control.switch.else.apex}
    end: (?<=\})
    patterns:
    - include: '#block'
    - include: '#expression'

  when-multiple-statement:
    begin: (when)\b\s*
    beginCaptures:
      '1': {name: keyword.control.switch.when.apex}
    end: (?<=\})
    patterns:
    - include: '#block'
    - include: '#expression'

  when-sobject-statement:
    begin: (when)\b\s+([_[:alnum:]]+)\s+([_[:alnum:]]+)\s*
    beginCaptures:
      '1': {name: keyword.control.switch.when.apex}
      '2': {name: storage.type.apex}
      '3': {name: entity.name.variable.local.apex}
    end: (?<=\})
    patterns:
    - include: '#block'
    - include: '#expression'

  when-statement:
    begin: (when)\b\s+([\'_\-[:alnum:]]+)\s*
    beginCaptures:
      '1': {name: keyword.control.switch.when.apex}
      '2':
        patterns:
        - include: '#expression'
    end: (?<=\})
    patterns:
    - include: '#block'
    - include: '#expression'

  when-string:
    begin: (when)(\b\s*)((\')[_.\,\'\s*[:alnum:]]+)
    beginCaptures:
      '1': {name: keyword.control.switch.when.apex}
      '2': {name: punctuation.whitespace.apex}
      '3':
        patterns:
        - include: '#when-string-statement'
        - include: '#punctuation-comma'
    end: (?<=\})
    patterns:
    - include: '#block'
    - include: '#expression'

  when-string-statement:
    patterns:
    - name: string.quoted.single.apex
      begin: \'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.apex}
      end: \'
      endCaptures:
        '0': {name: punctuation.definition.string.end.apex}

  while-statement:
    begin: (?<!\.)\b(while)\b\s*(?=\()
    beginCaptures:
      '1': {name: keyword.control.loop.while.apex}
    end: (?<=\})|(?=;)
    patterns:
    - begin: \(
      beginCaptures:
        '0': {name: punctuation.parenthesis.open.apex}
      end: \)
      endCaptures:
        '0': {name: punctuation.parenthesis.close.apex}
      patterns:
      - include: '#expression'
    - include: '#statement'

  xml-attribute:
    patterns:
    - match: |-
        (?x)
        (?:^|\s+)
        (
          (?:
            ([-_[:alnum:]]+)
            (:)
          )?
          ([-_[:alnum:]]+)
        )
        (=)
      captures:
        '1': {name: entity.other.attribute-name.apex}
        '2': {name: entity.other.attribute-name.namespace.apex}
        '3': {name: punctuation.separator.colon.apex}
        '4': {name: entity.other.attribute-name.localname.apex}
        '5': {name: punctuation.separator.equals.apex}
    - include: '#xml-string'

  xml-cdata:
    name: string.unquoted.cdata.apex
    begin: <!\[CDATA\[
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.apex}
    end: \]\]>
    endCaptures:
      '0': {name: punctuation.definition.string.end.apex}

  xml-character-entity:
    patterns:
    - name: constant.character.entity.apex
      match: |-
        (?x)
        (&)
        (
          (?:[[:alpha:]:_][[:alnum:]:_.-]*)|
          (?:\#[[:digit:]]+)|
          (?:\#x[[:xdigit:]]+)
        )
        (;)
      captures:
        '1': {name: punctuation.definition.constant.apex}
        '3': {name: punctuation.definition.constant.apex}
    - name: invalid.illegal.bad-ampersand.apex
      match: '&'

  xml-comment:
    name: comment.block.apex
    begin: <!--
    beginCaptures:
      '0': {name: punctuation.definition.comment.apex}
    end: -->
    endCaptures:
      '0': {name: punctuation.definition.comment.apex}

  xml-doc-comment:
    patterns:
    - include: '#xml-comment'
    - include: '#xml-character-entity'
    - include: '#xml-cdata'
    - include: '#xml-tag'

  xml-string:
    patterns:
    - name: string.quoted.single.apex
      begin: \'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.apex}
      end: \'
      endCaptures:
        '0': {name: punctuation.definition.string.end.apex}
      patterns:
      - include: '#xml-character-entity'
    - name: string.quoted.double.apex
      begin: \"
      beginCaptures:
        '0': {name: punctuation.definition.stringdoublequote.begin.apex}
      end: \"
      endCaptures:
        '0': {name: punctuation.definition.stringdoublequote.end.apex}
      patterns:
      - include: '#xml-character-entity'

  xml-tag:
    name: meta.tag.apex
    begin: |-
      (?x)
      (</?)
      (
        (?:
          ([-_[:alnum:]]+)
          (:)
        )?
        ([-_[:alnum:]]+)
      )
    beginCaptures:
      '1': {name: punctuation.definition.tag.apex}
      '2': {name: entity.name.tag.apex}
      '3': {name: entity.name.tag.namespace.apex}
      '4': {name: punctuation.separator.colon.apex}
      '5': {name: entity.name.tag.localname.apex}
    end: (/?>)
    endCaptures:
      '1': {name: punctuation.definition.tag.apex}
    patterns:
    - include: '#xml-attribute'
